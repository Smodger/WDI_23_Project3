{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/challenge.js","js/controllers/challenges.js","js/services/currentUser.js","js/models/entry.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/profile.js","js/controllers/stories.js","js/models/story.js","js/models/user.js","js/services/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","facebook","clientId","tokenPrefix","loginUrl","signupUrl","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmController","$http","method","params","confirmationCode","LoginController","User","login","isLoggedIn","console","log","credentials","currentUser","getPayload","get","id","_id","data","account","authenticate","service","Challenge","$resource","update","ChallengesIndexController","challengesIndex","all","query","ChallengesNewController","create","save","challengesNew","challenge","payload","projectCreator","ChallengesShowController","deleteChallenge","challengesShow","$remove","challengeLike","userIdIndex","like","indexOf","includes","push","splice","$update","participate","indexId","participants","findIndex","participant","userProfile","activeChallenges","Unparticipate","togglePopUp","popUpActive","addComment","comments","comment","isSubscribed","filter","length","$promise","incrementLikes","isAuthenticated","ChallengesEditController","challengesEdit","StoryEntries","googleplace","$window","restrict","require","scope","location","link","element","attrs","model","options","types","componentRestrictions","autocomplete","google","maps","places","Autocomplete","addListener","place","getPlace","geometry","toJSON","$setViewValue","val","googleMap","replace","template","$watch","map","Map","center","zoom","scrollwheel","Marker","position","animation","Animation","DROP","MainController","$rootScope","toggleMenu","main","menuActive","secureState","e","toState","message","protectedStates","name","preventDefault","$on","ProfileController","logout","profile","currentUserId","StoriesIndexController","Story","storiesIndex","StoriesCreateController","storiesCreate","story","authUser","userInfo","userId","StoriesCreateEntryController","addEntry","storiesCreateEntry","entries","new","order","StoriesShowController","deleteStory","storiesShow","delete","StoriesEditController","storiesEdit","entry","self","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","$sce","userLikes","usersShow","likes","deleteUser","video","trustAsHtml","UsersEditController","usersEdit","angular","module","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular\n.module('goApp', ['ngResource', 'ui.router', 'satellizer'])\n.config(Router)\n.config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('challengesIndex', {\n    url: '/challenges',\n    templateUrl: '/templates/challengesIndex.html',\n    controller: 'ChallengesIndexController as challengesIndex'\n  })\n  .state('challengesNew', {\n    url: '/challenges/new',\n    templateUrl: '/templates/challengesNew.html',\n    controller: 'ChallengesNewController as challengesNew'\n  })\n  .state('challengesShow', {\n    url: '/challenges/:id',\n    templateUrl: '/templates/challengesShow.html',\n    controller: 'ChallengesShowController as challengesShow'\n  })\n  .state('challengesEdit', {\n    url: '/challenges/:id/edit',\n    templateUrl: '/templates/challengesEdit.html',\n    controller: 'ChallengesEditController as challengesEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('registerInterim', {\n    url: '/registerInterim',\n    templateUrl: '/templates/registerInterim.html'\n  })\n  .state('confirm', {\n    url: '/confirm/:confirmationCode',\n    templateUrl: '/templates/confirm.html',\n    controller: 'ConfirmController as confirm'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('home', {\n    url: '/',\n    templateUrl: '/templates/home.html'\n    // controller: 'HomeController as home'\n  })\n  .state('usersIndex', {\n    url: '/challengers',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersEdit', {\n    url: '/challengers/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('usersShow', {\n    url: '/challengers/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('storiesIndex', {\n    url: '/stories',\n    templateUrl: '/templates/storyIndex.html',\n    controller: 'StoriesIndexController as storiesIndex'\n  })\n  .state('storiesCreate', {\n    url: '/stories/new',\n    templateUrl: '/templates/storyCreate.html',\n    controller: 'StoriesCreateController as storiesCreate'\n  })\n  .state('storiesCreateEntry', {\n    url: '/stories/:id/newEntry',\n    templateUrl: '/templates/storyCreateEntry.html',\n    controller: 'StoriesCreateEntryController as storiesCreateEntry'\n  })\n  .state('storiesEdit', {\n    url: '/stories/entries/:id/',\n    templateUrl: '/templates/storyEdit.html',\n    controller: 'StoriesEditController as storiesEdit'\n  })\n  .state('storiesShow', {\n    url: '/stories/:id',\n    templateUrl: '/templates/storyShow.html',\n    controller: 'StoriesShowController as storiesShow'\n  });\n\n  $urlRouterProvider.otherwise('/challenges');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n\n  $authProvider.facebook({\n    clientId: '922512684546745'\n  });\n\n  $authProvider.tokenPrefix = '';\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n}\n","angular.module('goApp')\n.controller('RegisterController', RegisterController)\n.controller('ConfirmController', ConfirmController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('registerInterim');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nConfirmController.$inject = ['$http', '$state'];\nfunction ConfirmController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  });\n}\n\n\nLoginController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction LoginController($auth, $state, User, user) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    console.log(login.isLoggedIn);\n    $auth.login(login.credentials)\n    .then(() => {\n      login.currentUser = $auth.getPayload();\n\n      if(login.currentUser) {\n        User.get({ id: login.currentUser._id }, (data) => {\n          user.account = data;\n          console.log(user.currentUser);\n        });\n      }\n      $state.go('home');\n    });\n  }\n  function authenticate(service) {\n    $auth.authenticate(service,() => {\n      $state.go('home');\n    });\n  }\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('goApp')\n  .factory('Challenge', Challenge);\n\nChallenge.$inject = ['$resource'];\nfunction Challenge($resource) {\n  return new $resource('/challenges/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .controller('ChallengesIndexController', ChallengesIndexController)\n  .controller('ChallengesNewController', ChallengesNewController)\n  .controller('ChallengesShowController', ChallengesShowController)\n  .controller('ChallengesEditController', ChallengesEditController);\n\nChallengesIndexController.$inject = ['Challenge'];\nfunction ChallengesIndexController(Challenge) {\n  const challengesIndex = this;\n  challengesIndex.all = Challenge.query();\n  // console.log('In the challenge index controller');\n}\n\n\nChallengesNewController.$inject = ['Challenge', '$state', '$auth'];\nfunction ChallengesNewController(Challenge, $state, $auth) {\n  const challengesNew = this;\n  const payload = $auth.getPayload();\n\n  challengesNew.challenge = {};\n  challengesNew.challenge.projectCreator = [payload._id];\n\n  function create() {\n    Challenge.save(challengesNew.challenge, () => {\n      $state.go('challengesIndex');\n    });\n  }\n\n\n\n  challengesNew.create = create;\n}\n\n//SHOW\nChallengesShowController.$inject = ['Challenge', 'User', '$state', '$auth'];\nfunction ChallengesShowController(Challenge, User, $state, $auth) {\n\n  const challengesShow = this;\n  const payload = $auth.getPayload();\n\n  if (payload) {\n    User.get({ id: payload._id }, (data)=> {\n      challengesShow.userProfile = data;\n    });\n  }\n\n\n  Challenge.get($state.params).$promise.then((challenge) => {\n    challengesShow.challenge = challenge;\n  });\n\n  function deleteChallenge() {\n    challengesShow.challenge.$remove(() => {\n      $state.go('challengesIndex');\n    });\n  }\n\n  function challengeLike() {\n\n    if(!payload){\n      $state.go('login');\n    } else {\n      const userIdIndex = challengesShow.challenge.like.indexOf(payload._id);\n      if (!challengesShow.challenge.like.includes(payload._id) && !!payload._id) {\n        challengesShow.challenge.like.push(payload._id);\n      } else if (challengesShow.challenge.like.includes(payload._id) && !!payload._id) {\n        challengesShow.challenge.like.splice(userIdIndex, 1);\n      }\n      challengesShow.challenge.$update();\n    }\n  }\n\n  function participate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return payload._id === participant._id;\n    });\n    if(indexId === -1) {\n      challengesShow.challenge.participants.push(challengesShow.userProfile);\n      challengesShow.userProfile.activeChallenges.push(challengesShow.challenge._id);\n\n      challengesShow.challenge.$update();\n      challengesShow.userProfile.$update();\n    }\n  }\n\n  function Unparticipate() {\n    const indexId = challengesShow.challenge.participants.findIndex((participant) => {\n      return payload._id === participant._id;\n    });\n    challengesShow.challenge.participants.splice(indexId, 1);\n    challengesShow.userProfile.activeChallenges.splice(indexId, 1);\n    challengesShow.challenge.$update();\n    challengesShow.userProfile.$update();\n  }\n\n  function togglePopUp() {\n    // console.log('In toggle pop up');\n    if(payload) {\n      challengesShow.popUpActive = !challengesShow.popUpActive;\n    } else {\n      $state.go('login');\n    }\n\n  }\n\n  function addComment(){\n    challengesShow.challenge.comments.push(challengesShow.comment);\n    challengesShow.challenge.$update(() => {\n      challengesShow.comment = '';\n    });\n  }\n\n  function isSubscribed() {\n    if (payload) {\n      if(challengesShow.challenge) {\n        return challengesShow.challenge.participants.filter((participant) => {\n          return payload._id === participant._id;\n        }).length > 0;\n      }\n    }\n  }\n  challengesShow.payload = payload;\n  challengesShow.isSubscribed = isSubscribed;\n  challengesShow.addComment = addComment;\n  challengesShow.togglePopUp = togglePopUp;\n  challengesShow.Unparticipate = Unparticipate;\n  challengesShow.participate = participate;\n  challengesShow.incrementLikes = challengeLike;\n  challengesShow.isLoggedIn = $auth.isAuthenticated;\n  challengesShow.deleteChallenge = deleteChallenge;\n}\n\nChallengesEditController.$inject = ['Challenge', '$state'];\nfunction ChallengesEditController(Challenge, $state) {\n  const challengesEdit = this;\n\n  challengesEdit.challenge = Challenge.get($state.params);\n\n  function update() {\n    challengesEdit.challenge.$update(() => {\n      $state.go('challengesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n}\n","angular.module('goApp')\n  .service('currentUser', currentUser);\n\ncurrentUser.$inject = ['User', '$auth'];\nfunction currentUser (User, $auth) {\n  var user = this;\n\n  // const isLoggedIn = $auth.isAuthenticated;\n  const currentUser = $auth.getPayload();\n\n  if(currentUser) {\n    User.get({ id: currentUser._id }, (data) => {\n      user.account = data;\n    });\n  }\n}\n","angular\n  .module('goApp')\n  .factory('StoryEntries', StoryEntries);\n\nStoryEntries.$inject = ['$resource'];\n\nfunction StoryEntries($resource) {\n  return new $resource('/stories/entries/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .directive('googleMap', googleMap)\n  .directive('googleplace', googleplace);\n\n\n\n// let geocoder = new google.maps.Geocoder();\n// geocoder.geocode( { 'address': $scope.textfield }, function(results, status) {\n//   if(status === google.maps.GeocoderStatus.OK && results.length > 0) {\n//     let location = results[0].geometry.location;\n//     $scope.myMap.panTo(location);\n//   }\n// });\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      location: '='\n    },\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        scope.location = place.geometry.location.toJSON();\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map HERE</div>',\n    scope: {\n      challenge: '='\n    },\n    link: function(scope, element) {\n      scope.$watch('challenge', () => {\n        if(scope.challenge) {\n\n          const map = new $window.google.maps.Map(element[0], {\n            center: scope.challenge.location,\n            zoom: 6,\n            scrollwheel: false\n          });\n\n          new $window.google.maps.Marker({\n            position: scope.challenge.location,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n        }\n      });\n\n    }\n  };\n}\n","angular.module('goApp')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$rootScope', '$state'];\nfunction MainController($auth, $rootScope, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function toggleMenu() {\n    console.log('in toggle menu');\n    main.menuActive = !main.menuActive;\n    console.log(main.menuActive);\n  }\n  main.toggleMenu = toggleMenu;\n\n  const protectedStates = ['challengesEdit', 'challengesNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('goApp')\n  .controller('ProfileController', ProfileController);\n\nProfileController.$inject = ['$auth', '$state', 'User', 'user'];\nfunction ProfileController($auth, $state, User, user) {\n  const profile = this;\n\n  profile.isLoggedIn = $auth.isAuthenticated;\n  \n  if ($auth.getPayload()){\n    profile.currentUserId = $auth.getPayload()._id;\n  }\n  profile.currentUser = user;\n\n  if(profile.isLoggedIn()) {\n    User.get({ id: profile.currentUserId }, (data) => {\n      user.account = data;\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        profile.account = null;\n        $state.go('home');\n      });\n  }\n  profile.logout = logout;\n\n  profile.message = null;\n}\n","angular.module('goApp')\n  .controller('StoriesIndexController', StoriesIndexController)\n  .controller('StoriesCreateController', StoriesCreateController)\n  .controller('StoriesCreateEntryController', StoriesCreateEntryController)\n  .controller('StoriesShowController', StoriesShowController)\n  .controller('StoriesEditController', StoriesEditController);\n\n\n//INDEX\nStoriesIndexController.$inject = ['Story'];\nfunction StoriesIndexController(Story) {\n  const storiesIndex = this;\n  storiesIndex.all = Story.query();\n}\n\n//CREATE\nStoriesCreateController.$inject = ['Story', '$state', '$auth', 'User'];\nfunction StoriesCreateController(Story, $state, $auth, User) {\n  const storiesCreate = this;\n\n  storiesCreate.authUser = $auth.getPayload();\n  if (storiesCreate.authUser) {\n    storiesCreate.authUser = storiesCreate.authUser._id;\n  }\n\n  User.get({ id: storiesCreate.authUser }, (data) => {\n    storiesCreate.userInfo = data;\n  });\n\n  storiesCreate.story = {\n    userId: storiesCreate.authUser\n  };\n\n  function create() {\n    Story.save(storiesCreate.story, (data) => {\n      $state.go('storiesCreateEntry', {id: data._id});\n    });\n  }\n  storiesCreate.create = create;\n}\n\n// Create entry\nStoriesCreateEntryController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesCreateEntryController(Story, $state, $auth) {\n  const storiesCreateEntry = this;\n\n  storiesCreateEntry.authUser = $auth.getPayload();\n  if (storiesCreateEntry.authUser) {\n    storiesCreateEntry.authUser = storiesCreateEntry.authUser._id;\n  }\n\n  Story.get( $state.params, (data) => {\n    storiesCreateEntry.story = data;\n\n\n    storiesCreateEntry.new = {\n      order: storiesCreateEntry.story.entries.length + 1\n    };\n  });\n\n  function addEntry() {\n    storiesCreateEntry.story.entries.push(storiesCreateEntry.new);\n    console.log(storiesCreateEntry.story.entries);\n    storiesCreateEntry.story.$update(() => {\n      $state.go('storiesShow', $state.params );\n    });\n  }\n\n  storiesCreateEntry.addEntry = addEntry;\n}\n\n//SHOW & DELETE\nStoriesShowController.$inject = ['Story', '$state', '$auth'];\nfunction StoriesShowController(Story, $state, $auth) {\n  const storiesShow = this;\n\n  Story.get($state.params, (data) => {\n    storiesShow.story = data;\n\n    storiesShow.authUser = $auth.getPayload();\n    if (storiesShow.authUser) {\n      storiesShow.authUser = storiesShow.authUser._id;\n    }\n\n    storiesShow.isLoggedIn = $auth.isAuthenticated;\n    storiesShow.delete = deleteStory;\n  });\n\n  function deleteStory() {\n    storiesShow.story.$remove(() => {\n      $state.go('storiesIndex');\n    });\n  }\n}\n\n//EDIT\nStoriesEditController.$inject = ['Story', '$state'];\nfunction StoriesEditController(Story, $state) {\n  const storiesEdit = this;\n  console.log('I am working');\n\n  Story.get($state.params, (data) => {\n    storiesEdit.entry = data;\n  });\n\n  function update() {\n    console.log(storiesEdit.entry);\n    // storiesEdit.entry.$update((data) => {\n    //   $state.go('storiesShow', { id: storiesEdit.authUser });\n    // });\n  }\n\n  storiesEdit.update = update;\n}\n","angular\n  .module('goApp')\n  .factory('Story', Story);\n\nStory.$inject = ['$resource'];\n\nfunction Story($resource) {\n  return new $resource('/stories/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('goApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\n\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('goApp')\n  .service('user', user);\n\nfunction user() {\n  var self = this;\n\n  self.account = {};\n}\n","angular.module('goApp')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\n//INDEX\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n//CREATE\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('userIndex');\n    });\n  }\n  usersNew.create = create;\n}\n\n//SHOW & DELETE\nUsersShowController.$inject = ['User', '$state', '$auth', '$sce'];\nfunction UsersShowController(User, $state, $auth, $sce) {\n  const usersShow = this;\n\n  User.get($state.params).$promise.then((data) => {\n    usersShow.user = data;\n\n    usersShow.authUser = $auth.getPayload();\n    if (usersShow.authUser) {\n      usersShow.authUser = usersShow.authUser._id;\n    }\n\n    console.log(usersShow.user);\n    usersShow.video = $sce.trustAsHtml(usersShow.user.video);\n\n    usersShow.incrementLikes = userLikes;\n    usersShow.isLoggedIn = $auth.isAuthenticated;\n    usersShow.delete = deleteUser;\n  }\n\n  );\n\n  function userLikes() {\n    const userIdIndex = usersShow.user.likes.indexOf(usersShow.authUser);\n\n    if (!usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.push(usersShow.authUser);\n    } else if (usersShow.user.likes.includes(usersShow.authUser) && !!usersShow.authUser) {\n      usersShow.user.likes.splice(userIdIndex, 1);\n    }\n\n    usersShow.user.$update();\n  }\n\n  // function userChallenges () {\n  //   usersShow.users.activeChallenges.data.push(usersShow.authUser);\n  //   usersShow.users.activeChallenges.userId.push(usersShow.authUser);\n  //   usersShow.users.$update((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  //\n  // usersShow.userChallenges = userChallenges;\n\n  // usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n//EDIT\nUsersEditController.$inject = ['User', '$state', '$auth', 'user'];\nfunction UsersEditController(User, $state, $auth, user) {\n  const usersEdit = this;\n\n  usersEdit.authUser = $auth.getPayload();\n  if (usersEdit.authUser) {\n    usersEdit.authUser = usersEdit.authUser._id;\n  }\n\n  User.get({ id: usersEdit.authUser }).$promise.then((data) => {\n    usersEdit.user = data;\n  });\n\n\n  function update() {\n\n    usersEdit.user.$update((data) => {\n      $state.go('usersShow', { id: usersEdit.authUser });\n      user.account = data;\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}